"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const transaction_request_builder_1 = require("../transaction-request-builder");
const entity_query_1 = require("../../entity-query");
const conditions_1 = require("../../conditions");
const errors_1 = require("../../errors");
const key = 'key';
const entityName = 'testEntity';
describe('transaction-request-builder', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    describe('buildRequestSet', () => {
        it('should build request set without entity', () => {
            const value = 'value';
            const transactSet = {
                key,
                value
            };
            const result = (0, transaction_request_builder_1.buildRequestSet)(transactSet);
            expect(result).toEqual({ key, value });
        });
        it('should build request set with entity and conditions', () => {
            const conditions = new entity_query_1.FilterBuilder().and('field1', conditions_1.FilterConditions.beginsWith('S'));
            const transactSet = {
                key,
                value: { field1: 'test' },
                entity: {
                    entityName,
                    conditions
                }
            };
            const result = (0, transaction_request_builder_1.buildRequestSet)(transactSet);
            expect(result).toEqual({
                key,
                value: { field1: 'test' },
                entityName,
                conditions: { and: conditions.filters() }
            });
        });
        it('should throw error if no conditions are set', () => {
            const conditions = new entity_query_1.FilterBuilder();
            const transactSet = {
                key,
                value: { field1: 'test' },
                entity: {
                    entityName,
                    conditions
                }
            };
            expect(() => (0, transaction_request_builder_1.buildRequestSet)(transactSet)).toMatchError(new errors_1.ForgeKvsError('Builder must have at least one condition set'));
        });
    });
    describe('buildRequestDelete', () => {
        it('should build request delete without entity', () => {
            const transactDelete = { key };
            const result = (0, transaction_request_builder_1.buildRequestDeletes)(transactDelete);
            expect(result).toEqual({ key });
        });
        it('should build request delete with entity and conditions', () => {
            const conditions = new entity_query_1.FilterBuilder().and('field1', conditions_1.FilterConditions.beginsWith('S'));
            const transactDelete = {
                key,
                entity: {
                    entityName,
                    conditions
                }
            };
            const result = (0, transaction_request_builder_1.buildRequestDeletes)(transactDelete);
            expect(result).toEqual({
                key,
                entityName,
                conditions: { and: conditions.filters() }
            });
        });
        it('should throw error if no conditions are set', () => {
            const conditions = new entity_query_1.FilterBuilder();
            const transactDelete = {
                key,
                entity: {
                    entityName,
                    conditions
                }
            };
            expect(() => (0, transaction_request_builder_1.buildRequestDeletes)(transactDelete)).toMatchError(new errors_1.ForgeKvsError('Builder must have at least one condition set'));
        });
    });
    describe('buildRequestCheck', () => {
        it('should build request check with entity and conditions', () => {
            const conditions = new entity_query_1.FilterBuilder().and('field1', conditions_1.FilterConditions.beginsWith('S'));
            const transactCheck = {
                key,
                entity: {
                    entityName,
                    conditions
                }
            };
            const result = (0, transaction_request_builder_1.buildRequestChecks)(transactCheck);
            expect(result).toEqual({
                key,
                entityName,
                conditions: { and: conditions.filters() }
            });
        });
        it('should throw error if no conditions are set', () => {
            const conditions = new entity_query_1.FilterBuilder();
            const transactCheck = {
                key,
                entity: {
                    entityName,
                    conditions
                }
            };
            expect(() => (0, transaction_request_builder_1.buildRequestChecks)(transactCheck)).toMatchError(new errors_1.ForgeKvsError('Builder must have at least one condition set'));
        });
    });
});
