export interface Result<T> {
    key: string;
    value: T;
}
export interface ListResult<T> {
    results: Result<T>[];
    nextCursor?: string;
}
export declare enum Sort {
    ASC = "ASC",
    DESC = "DESC"
}
export declare type StringOrNumberOrBoolean = string | number | boolean;
export declare type StringOrNumber = string | number;
export interface BetweenClause<T extends StringOrNumber> {
    condition: 'BETWEEN';
    values: [T, T];
}
export interface BeginsWithClause {
    condition: 'BEGINS_WITH';
    values: [StringOrNumber];
}
export interface ExistsClause {
    condition: 'EXISTS';
    values: [true];
}
export interface NotExistsClause {
    condition: 'NOT_EXISTS';
    values: [true];
}
export interface GreaterThanClause {
    condition: 'GREATER_THAN';
    values: [StringOrNumber];
}
export interface GreaterThanEqualToClause {
    condition: 'GREATER_THAN_EQUAL_TO';
    values: [StringOrNumber];
}
export interface LessThanClause {
    condition: 'LESS_THAN';
    values: [StringOrNumber];
}
export interface LessThanEqualToClause {
    condition: 'LESS_THAN_EQUAL_TO';
    values: [StringOrNumber];
}
export interface ContainsClause {
    condition: 'CONTAINS';
    values: [string];
}
export interface NotContainsClause {
    condition: 'NOT_CONTAINS';
    values: [string];
}
export interface EqualToClause {
    condition: 'EQUAL_TO';
    values: [StringOrNumberOrBoolean];
}
export interface NotEqualToClause {
    condition: 'NOT_EQUAL_TO';
    values: [StringOrNumberOrBoolean];
}
export declare type FilterOperator = 'or' | 'and';
//# sourceMappingURL=types.d.ts.map