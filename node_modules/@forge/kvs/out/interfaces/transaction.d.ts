import { BaseFilter } from '../entity-query';
export interface TransactSet<T> {
    key: string;
    value: T;
    entity?: EntityConditions<T>;
}
export interface TransactDelete<T> {
    key: string;
    entity?: EntityConditions<T>;
}
export interface TransactCheck<T> {
    key: string;
    entity: EntityRequiredConditions<T>;
}
export declare type EntityConditions<T> = {
    entityName: string;
    conditions?: BaseFilter<T>;
};
export declare type EntityRequiredConditions<T> = Omit<EntityConditions<T>, 'conditions'> & {
    conditions: BaseFilter<T>;
};
export declare type StorageValue = string | number | boolean | Record<string, any> | any[];
export interface TransactionBuilder {
    set<T>(key: string, value: T, entity?: EntityConditions<T>): this;
    delete<T>(key: string, entity?: EntityConditions<T>): this;
    check<T>(key: string, entity: EntityRequiredConditions<T>): this;
    execute(): Promise<void>;
}
//# sourceMappingURL=transaction.d.ts.map