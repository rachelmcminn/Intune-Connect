import { StorageApi } from './storage-api';
import { EntityConditions, EntityRequiredConditions, TransactCheck, TransactDelete, TransactionBuilder, TransactSet } from './interfaces/transaction';
export declare class TransactionBuilderImpl implements TransactionBuilder {
    private readonly storageApi;
    protected sets: TransactSet<unknown>[];
    protected deletes: TransactDelete<unknown>[];
    protected checks: TransactCheck<unknown>[];
    constructor(storageApi: StorageApi, sets?: TransactSet<unknown>[], deletes?: TransactDelete<unknown>[], checks?: TransactCheck<unknown>[]);
    set<T>(key: string, value: T, entity?: EntityConditions<T>): this;
    delete<T>(key: string, entity?: EntityConditions<T>): this;
    check<T>(key: string, { entityName, conditions }: EntityRequiredConditions<T>): this;
    execute(): Promise<void>;
}
//# sourceMappingURL=transaction-api.d.ts.map