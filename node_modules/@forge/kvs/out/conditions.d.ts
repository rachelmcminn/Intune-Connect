import { BeginsWithClause, BetweenClause, ContainsClause, EqualToClause, ExistsClause, GreaterThanClause, GreaterThanEqualToClause, LessThanClause, LessThanEqualToClause, NotContainsClause, NotEqualToClause, NotExistsClause, StringOrNumber, StringOrNumberOrBoolean } from './interfaces/types';
declare function between<T extends StringOrNumber>(firstValue: T, secondValue: T): BetweenClause<T>;
declare function beginsWith(value: StringOrNumber): BeginsWithClause;
declare function exists(): ExistsClause;
declare function notExists(): NotExistsClause;
declare function greaterThan(value: StringOrNumber): GreaterThanClause;
declare function greaterThanEqualTo(value: StringOrNumber): GreaterThanEqualToClause;
declare function lessThan(value: StringOrNumber): LessThanClause;
declare function lessThanEqualTo(value: StringOrNumber): LessThanEqualToClause;
declare function contains(value: string): ContainsClause;
declare function notContains(value: string): NotContainsClause;
declare function equalTo(value: StringOrNumberOrBoolean): EqualToClause;
declare function notEqualTo(value: StringOrNumberOrBoolean): NotEqualToClause;
export declare const WhereConditions: {
    beginsWith: typeof beginsWith;
    between: typeof between;
    equalTo: typeof equalTo;
    greaterThan: typeof greaterThan;
    greaterThanEqualTo: typeof greaterThanEqualTo;
    lessThan: typeof lessThan;
    lessThanEqualTo: typeof lessThanEqualTo;
};
export declare const FilterConditions: {
    beginsWith: typeof beginsWith;
    between: typeof between;
    contains: typeof contains;
    notContains: typeof notContains;
    equalTo: typeof equalTo;
    notEqualTo: typeof notEqualTo;
    exists: typeof exists;
    notExists: typeof notExists;
    greaterThan: typeof greaterThan;
    greaterThanEqualTo: typeof greaterThanEqualTo;
    lessThan: typeof lessThan;
    lessThanEqualTo: typeof lessThanEqualTo;
};
export {};
//# sourceMappingURL=conditions.d.ts.map