import { EntityFilterClauses, AndFilter, EntityQueryBuilder, IndexQueryBuilder, Filter, FilterItem, IndexOptions, OrFilter } from './interfaces/entity-query';
import { StorageApi } from './storage-api';
export declare class KvsIndexQueryBuilder<T> implements IndexQueryBuilder<T> {
    private readonly entityName;
    private readonly storageApi;
    constructor(entityName: string, storageApi: StorageApi);
    index(name: string, indexOptions?: IndexOptions<T>): EntityQueryBuilder<T>;
}
export declare abstract class BaseFilter<T> {
    protected readonly items: Array<FilterItem<T>>;
    constructor(items?: Array<FilterItem<T>>);
    filters(): Array<FilterItem<T>>;
    operator(): "or" | "and";
}
export declare class FilterBuilder<T> extends BaseFilter<T> implements Filter<T> {
    and(field: keyof T, condition: EntityFilterClauses): AndFilterBuilder<T>;
    or(field: keyof T, condition: EntityFilterClauses): OrFilterBuilder<T>;
}
declare class AndFilterBuilder<T> extends BaseFilter<T> implements AndFilter<T> {
    and(field: keyof T, condition: EntityFilterClauses): this;
}
declare class OrFilterBuilder<T> extends BaseFilter<T> implements OrFilter<T> {
    or(field: keyof T, condition: EntityFilterClauses): this;
}
export {};
//# sourceMappingURL=entity-query.d.ts.map