"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useId = useId;
exports.useIdSeed = useIdSeed;
var _react = _interopRequireDefault(require("react"));
var _reactUid = require("react-uid");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _React$useId; // eslint-disable-next-line
// Type copied from https://github.com/thearnica/react-uid/blob/0f507fbbdb1ab84acf477ec32698afe3d2191e49/src/hooks.ts#L12
// Copied rather than inferred to make the type transparent

// @ts-ignore - useId is not accessible in React 16
var react18UseId = (_React$useId = _react.default.useId) !== null && _React$useId !== void 0 ? _React$useId : undefined;

/**
 * Returns a unique id
 *
 * React 18 SSR and Concurrent modes are supported when the `platform.design-system-team.react-18-use-id_mn8q4` flag is enabled.
 * This is a interop function that supports React 16 and 18.
 *
 * If migrating from `useUID` in the `react-uid` package, then `useId` is a direct replacement.
 *
 * @return string
 * @see {@link useIdSeed}
 * @see https://github.com/thearnica/react-uid#hooks-168
 * @example
 * const id = useUID();
 * id == 1; // for example
 *
 * Parts of the above are from: https://github.com/thearnica/react-uid/blob/0f507fbbdb1ab84acf477ec32698afe3d2191e49/src/hooks.ts#L41C1-L49C4
 */
function useId() {
  if (react18UseId && (0, _platformFeatureFlags.fg)('platform.design-system-team.react-18-use-id_mn8q4')) {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    return react18UseId();
  }

  // eslint-disable-next-line react-hooks/rules-of-hooks
  return (0, _reactUid.useUID)();
}

/**
 * Returns an id generator
 *
 * React 18 SSR and Concurrent modes are supported when the `platform.design-system-team.react-18-use-id_mn8q4` flag is enabled.
 * This is a interop function that supports React 16 and 18.
 *
 * If migrating from `useUIDSeed` in the `react-uid` package, then `useIdSeed` is a direct replacement.
 *
 * "If you need to give IDs to multiple related elements, you can call useId to generate a shared prefix for them" - From React
 * This function will help to implement the above.
 * @return (id: any) => string
 * @see https://react.dev/reference/react/useId#generating-ids-for-several-related-elements
 * @see https://github.com/thearnica/react-uid#hooks-168
 * @example
 * import { useIdSeed } from '@atlaskit/ds-lib/react-uid';
 *
 * export default function Form() {
 * 	 const idSeed = useIdSeed();
 *   return (
 *     <form>
 *       <label htmlFor={idSeed('firstName')}>First Name:</label>
 *       <input id={idSeed('firstName')} type="text" />
 *       <hr />
 *       <label htmlFor={idSeed('lastName')}>Last Name:</label>
 *       <input id={idSeed('lastName')} type="text" />
 *     </form>
 *   );
 * }
 */
function useIdSeed() {
  if (react18UseId && (0, _platformFeatureFlags.fg)('platform.design-system-team.react-18-use-id_mn8q4')) {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    var uid = react18UseId();
    return function (id) {
      return "".concat(uid, "-").concat(id.toString());
    };
  }

  // eslint-disable-next-line react-hooks/rules-of-hooks
  return (0, _reactUid.useUIDSeed)();
}