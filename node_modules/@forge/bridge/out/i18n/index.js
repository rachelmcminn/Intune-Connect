"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTranslationFunction = exports.getTranslations = exports.resetTranslationsCache = void 0;
const i18n_1 = require("@forge/i18n");
const view_1 = require("../view");
const frontendResourcesAccessor = {
    getI18nInfoConfig: async () => {
        const resp = await fetch(`./${i18n_1.I18N_BUNDLE_FOLDER_NAME}/${i18n_1.I18N_INFO_FILE_NAME}`);
        if (!resp.ok) {
            throw new Error('Failed to get i18n info config: ' + resp.statusText);
        }
        const info = (await resp.json());
        return info.config;
    },
    getTranslationResource: async (locale) => {
        const resp = await fetch(`./${i18n_1.I18N_BUNDLE_FOLDER_NAME}/${locale}.json`);
        if (!resp.ok) {
            throw new Error(`Failed to get translation resource for locale: ${locale}`);
        }
        return resp.json();
    }
};
const translationsGetter = new i18n_1.TranslationsGetter(frontendResourcesAccessor);
const resetTranslationsCache = () => {
    translationsGetter.reset();
};
exports.resetTranslationsCache = resetTranslationsCache;
const getTranslations = async (locale = null, options = {
    fallback: true
}) => {
    let targetLocale = locale;
    if (!targetLocale) {
        const context = await view_1.view.getContext();
        targetLocale = context.locale;
    }
    return await translationsGetter.getTranslations(targetLocale, options);
};
exports.getTranslations = getTranslations;
const createTranslationFunction = async (locale = null) => {
    let targetLocale = locale;
    if (!targetLocale) {
        const context = await view_1.view.getContext();
        targetLocale = context.locale;
    }
    const translator = new i18n_1.Translator(targetLocale, translationsGetter);
    await translator.init();
    return (i18nKey, defaultValue) => { var _a, _b; return (_b = (_a = translator.translate(i18nKey)) !== null && _a !== void 0 ? _a : defaultValue) !== null && _b !== void 0 ? _b : i18nKey; };
};
exports.createTranslationFunction = createTranslationFunction;
