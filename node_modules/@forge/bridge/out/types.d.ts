import { type ForgeSupportedLocaleCode } from '@forge/i18n';
import { type ThemeState } from '@atlaskit/tokens';
export declare type InvokePayload = {
    [key in number | string]: any;
};
export declare type InvokeResponse = Record<string, any> | void;
export declare type ProductFetchResponse = {
    body?: string;
    headers: {
        [key: string]: string;
    };
    isAttachment?: boolean;
} & Pick<ResponseInit, 'status' | 'statusText'>;
export declare enum ExtensionEnvironment {
    DEVELOPMENT = "DEVELOPMENT",
    STAGING = "STAGING",
    PRODUCTION = "PRODUCTION"
}
declare type UserAccessDetails = {
    hasAccess: boolean;
};
export declare type EnvironmentType = keyof typeof ExtensionEnvironment;
export interface FullContext {
    accountId?: string;
    cloudId?: string;
    workspaceId?: string;
    extension: ExtensionData;
    environmentId: string;
    environmentType: EnvironmentType;
    license?: LicenseDetails;
    localId: string;
    locale: ForgeSupportedLocaleCode;
    moduleKey: string;
    siteUrl: string;
    timezone: string;
    theme?: Partial<ThemeState> | null;
    surfaceColor?: string | null;
    userAccess?: UserAccessDetails;
}
interface ExtensionData {
    [k: string]: any;
}
declare enum EcosystemLicenseMode {
    USER_ACCESS = "USER_ACCESS"
}
export interface LicenseDetails {
    active: boolean;
    billingPeriod: string;
    ccpEntitlementId: string;
    ccpEntitlementSlug: string;
    isEvaluation: boolean;
    subscriptionEndDate: string | null;
    supportEntitlementNumber: string | null;
    trialEndDate: string | null;
    type: string;
    modes: [EcosystemLicenseMode] | null;
}
export declare type Subscription = {
    unsubscribe: () => void;
};
export {};
//# sourceMappingURL=types.d.ts.map