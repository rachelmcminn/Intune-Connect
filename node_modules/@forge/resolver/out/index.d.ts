interface InvokePayload {
    call: {
        functionKey: string;
        payload?: {
            [key in number | string]: any;
        };
        jobId?: string;
    };
    context: {
        [key: string]: any;
    };
}
export interface Request {
    payload: {
        [key in number | string]: any;
    };
    context: InvokePayload['context'];
}
interface ResponseObject {
    [key: string]: any;
}
export declare type Response = ResponseObject | string | void;
export declare type ResolverFunction = (request: Request) => Promise<Response> | Response;
declare type DefinitionsHandler = (payload: InvokePayload, backendRuntimePayload?: Request['payload']) => Promise<ReturnType<ResolverFunction>>;
export default class Resolver {
    private functions;
    constructor();
    define(functionKey: string, cb: ResolverFunction): this;
    private getFunction;
    private sanitizeObject;
    getDefinitions(): DefinitionsHandler;
}
export {};
//# sourceMappingURL=index.d.ts.map