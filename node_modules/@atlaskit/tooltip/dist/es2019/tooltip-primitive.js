/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { forwardRef } from 'react';

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { layers } from '@atlaskit/theme/constants';
const VAR_PRIMITIVE_ZINDEX = 'tooltipPrimitiveZindex';
const primitiveStyles = css({
  zindex: `var(${VAR_PRIMITIVE_ZINDEX})`,
  cursor: `default`
});

/**
 * The lower level component for rendering a tooltip.
 */
const TooltipPrimitive = /*#__PURE__*/forwardRef(function TooltipPrimitive({
  style,
  className,
  children,
  placement,
  testId,
  onMouseOut,
  onMouseOver,
  id
}, ref) {
  const styleWithZIndex = {
    ...style,
    [VAR_PRIMITIVE_ZINDEX]: layers.tooltip()
  };
  return jsx("div", {
    ref: ref
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
    ,
    style: styleWithZIndex,
    "data-testid": testId ? `${testId}--wrapper` : undefined
  }, jsx("div", {
    role: "tooltip"
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    ,
    className: className
    // Because the tooltip should not be focusable, there is no reason to have key events.
    /* eslint-disable-next-line jsx-a11y/mouse-events-have-key-events */,
    onMouseOut: onMouseOut
    /* eslint-disable-next-line jsx-a11y/mouse-events-have-key-events */,
    onMouseOver: onMouseOver,
    css: primitiveStyles,
    "data-placement": placement,
    "data-testid": testId,
    id: id
  }, children));
});
TooltipPrimitive.displayName = 'TooltipPrimitive';
export default TooltipPrimitive;