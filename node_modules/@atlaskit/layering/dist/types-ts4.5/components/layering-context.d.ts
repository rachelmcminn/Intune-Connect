import React, { type MutableRefObject, type ReactNode } from 'react';
/**
 *
 *  @internal
 * LevelContext which maintains the current level of nested layers
 * Default is 0
 */
export declare const LevelContext: React.Context<number>;
/**
 *
 *  @internal
 * TopLevelContext which maintains the top level ref and setTopLevel method of layers
 * Default ref value is null
 *
 */
export declare const TopLevelContext: React.Context<{
    topLevelRef: MutableRefObject<number | null>;
    layerList?: React.MutableRefObject<string[] | null> | undefined;
    setTopLevel: (level: number) => void;
}>;
/**
 *
 * @important the component is toggled by isDisabled props, the default isDisabled is true
 *
 * Layering component is a wrapper to let children to consume layer contexts and hooks.
 *
 */
export declare const Layering: ({ children, isDisabled, }: {
    children: ReactNode;
    isDisabled?: boolean | undefined;
}) => React.JSX.Element;
