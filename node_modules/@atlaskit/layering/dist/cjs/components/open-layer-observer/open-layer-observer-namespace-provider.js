"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OpenLayerObserverNamespaceProvider = OpenLayerObserverNamespaceProvider;
var _react = _interopRequireWildcard(require("react"));
var _tinyInvariant = _interopRequireDefault(require("tiny-invariant"));
var _openLayerObserverNamespaceContext = require("./open-layer-observer-namespace-context");
var _useOpenLayerObserverNamespace = require("./use-open-layer-observer-namespace");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * Creates a layer namespace for grouping layers together.
 */
function OpenLayerObserverNamespaceProvider(_ref) {
  var children = _ref.children,
    namespace = _ref.namespace;
  // If there is an existing namespace context being provided, throw an invariant.
  // This use case is not supported at this time.
  var parentContext = (0, _useOpenLayerObserverNamespace.useOpenLayerObserverNamespace)();
  (0, _react.useEffect)(function () {
    (0, _tinyInvariant.default)(parentContext === null, "An OpenLayerObserver namespace already exists in this component tree: ".concat(parentContext, ". Nesting OpenLayerObserverNamespaceProvider is not supported."));
  }, [parentContext]);
  return /*#__PURE__*/_react.default.createElement(_openLayerObserverNamespaceContext.OpenLayerObserverNamespaceContext.Provider, {
    value: namespace
  }, children);
}