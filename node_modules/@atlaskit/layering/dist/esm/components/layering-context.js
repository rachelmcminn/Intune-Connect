import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React, { createContext, useContext, useEffect, useMemo, useRef } from 'react';
import __noop from '@atlaskit/ds-lib/noop';
import { fg } from '@atlaskit/platform-feature-flags';

/**
 *
 *  @internal
 * LevelContext which maintains the current level of nested layers
 * Default is 0
 */
export var LevelContext = /*#__PURE__*/createContext(0);

/**
 *
 *  @internal
 * TopLevelContext which maintains the top level ref and setTopLevel method of layers
 * Default ref value is null
 *
 */
export var TopLevelContext = /*#__PURE__*/createContext({
  topLevelRef: {
    current: null
  },
  layerList: {
    current: null
  },
  setTopLevel: __noop
});

/**
 *
 *  @internal
 * Context Provider Component which provider the current level of nested layers
 * It handles level management when it mounts and unmounts
 *
 */
var LevelProvider = function LevelProvider(_ref) {
  var children = _ref.children,
    currentLevel = _ref.currentLevel;
  var _useContext = useContext(TopLevelContext),
    setTopLevel = _useContext.setTopLevel,
    topLevelRef = _useContext.topLevelRef,
    layerList = _useContext.layerList;
  // This is not unstable, it will run once for ref creation.
  // eslint-disable-next-line  @repo/internal/react/disallow-unstable-values
  var id = useRef(fg('layering-top-level-use-array') ? Math.random().toString(36) : '');
  if (!fg('layering-top-level-use-array')) {
    if (topLevelRef.current === null || currentLevel > topLevelRef.current) {
      setTopLevel(currentLevel);
    }
  }
  if (!fg('layering-top-level-use-array')) {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    useEffect(function () {
      return function () {
        // avoid immediate cleanup using setTimeout when component unmount
        // this will make sure non-top layer components can get the correct top level value
        // when multiple layers trigger onClose in sequence
        setTimeout(function () {
          setTopLevel(currentLevel - 1);
        }, 0);
      };
    }, [setTopLevel, currentLevel, topLevelRef]);
  }
  if (fg('layering-top-level-use-array')) {
    // Remove eslint error on FG cleanup
    // eslint-disable-next-line react-hooks/rules-of-hooks
    useEffect(function () {
      var safeLayerList = layerList === null || layerList === void 0 ? void 0 : layerList.current;
      var safeId = id.current;
      if (!safeLayerList) {
        return;
      }
      safeLayerList.push(safeId);
      return function () {
        var index = safeLayerList.indexOf(safeId);
        if (index > -1) {
          safeLayerList.splice(index, 1);
        }
      };
    }, [layerList, id]);
  }
  return /*#__PURE__*/React.createElement(LevelContext.Provider, {
    value: currentLevel
  }, children);
};

/**
 *
 *  @internal
 * Context Provider Component which provides the top level of all nested layers
 * It provides initial top level ref value as 0 and set top level method
 *
 */
var LayeringProvider = function LayeringProvider(_ref2) {
  var children = _ref2.children;
  var topLevelRef = useRef(0);
  var layerList = useRef([]);
  var value = useMemo(function () {
    return _objectSpread({
      topLevelRef: topLevelRef,
      setTopLevel: function setTopLevel(level) {
        topLevelRef.current = level;
      }
    }, fg('layering-top-level-use-array') ? {
      layerList: layerList
    } : {});
  }, [topLevelRef]);
  return /*#__PURE__*/React.createElement(TopLevelContext.Provider, {
    value: value
  }, children);
};

/**
 *
 * @important the component is toggled by isDisabled props, the default isDisabled is true
 *
 * Layering component is a wrapper to let children to consume layer contexts and hooks.
 *
 */
export var Layering = function Layering(_ref3) {
  var children = _ref3.children,
    _ref3$isDisabled = _ref3.isDisabled,
    isDisabled = _ref3$isDisabled === void 0 ? true : _ref3$isDisabled;
  var currentLevel = useContext(LevelContext);
  if (isDisabled) {
    return /*#__PURE__*/React.createElement(React.Fragment, null, children);
  }
  var isNested = currentLevel > 0;
  var content = /*#__PURE__*/React.createElement(LevelProvider, {
    currentLevel: currentLevel + 1
  }, children);
  return isNested ? content : /*#__PURE__*/React.createElement(LayeringProvider, null, content);
};