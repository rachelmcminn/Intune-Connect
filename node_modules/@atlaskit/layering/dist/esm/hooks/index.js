import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { useCallback, useContext, useEffect, useRef } from 'react';
import { bindAll } from 'bind-event-listener';
import { fg } from '@atlaskit/platform-feature-flags';
import { LevelContext, TopLevelContext } from '../components/layering-context';
var ESCAPE = 'Escape';
/**
 * Calls back when the escape key is pressed.
 * To be used exclusively for closing layered components.
 * Use the `isDisabled` argument to ignore closing events.
 *
 * ```js
 * useCloseOnEscapePress({
 *   onClose: () => {},
 *   isDisabled: false,
 * });
 * ```
 */
export function useCloseOnEscapePress(_ref) {
  var onClose = _ref.onClose,
    isDisabled = _ref.isDisabled;
  var escapePressed = useRef(false);
  var _useLayering = useLayering(),
    isLayerDisabled = _useLayering.isLayerDisabled;
  var onKeyDown = useCallback(function (e) {
    var isDisabledLayer = isLayerDisabled();
    if (isDisabled || escapePressed.current || e.key !== ESCAPE || isDisabledLayer) {
      // We're either already handling the key down event or it's not escape or disabled.
      // Bail early!
      return;
    }
    escapePressed.current = true;
    onClose(e);
  }, [onClose, isDisabled, isLayerDisabled]);
  var onKeyUp = useCallback(function () {
    escapePressed.current = false;
  }, []);
  useEffect(function () {
    return bindAll(window, [{
      type: 'keydown',
      listener: onKeyDown
    }, {
      type: 'keyup',
      listener: onKeyUp
    }], {
      capture: false
    });
  }, [onKeyDown, onKeyUp]);
}

/**
 *
 * Layering hook to get layering info like the current level, the top level of the given component
 *
 */
export function useLayering() {
  var currentLevel = useContext(LevelContext);
  var _useContext = useContext(TopLevelContext),
    topLevelRef = _useContext.topLevelRef,
    layerList = _useContext.layerList;
  var isLayerDisabled = useCallback(function () {
    if (fg('layering-top-level-use-array')) {
      var _layerList$current$le, _layerList$current;
      return ((_layerList$current$le = layerList === null || layerList === void 0 || (_layerList$current = layerList.current) === null || _layerList$current === void 0 ? void 0 : _layerList$current.length) !== null && _layerList$current$le !== void 0 ? _layerList$current$le : 0) !== currentLevel;
    }
    return !!topLevelRef.current && currentLevel !== topLevelRef.current;
  }, [currentLevel, topLevelRef, layerList]);
  return _objectSpread({
    currentLevel: currentLevel,
    topLevelRef: topLevelRef,
    isLayerDisabled: isLayerDisabled
  }, fg('layering-top-level-use-array') ? {
    layerList: layerList
  } : {});
}